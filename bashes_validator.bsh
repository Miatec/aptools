#!/bin/bash

# Alexandre PIN - 13/12/19
# This script check every bash file in the working directory (or the one in parameter)
# The incorrect files names are stored in bad_bash_files.txt


# Variables definitions
ROOT_PATH=$1
tmp_bash_list_file=./tmp_bash_list_file.txt
tmp_bashlintres_file=./bashlint.tmp.res
output_bad_bash_files=./bad_bash_files.txt


# Handling argument
if test $1 = ""
then
	ROOT_PATH=./
fi

cd $ROOT_PATH

# (Re)initialisation of the result file
rm $output_bad_bash_files
echo "# File generated by $0" >> $output_bad_bash_files
echo "# It contains all the invalid files found in $(dirname $ROOT_PATH)" >> $output_bad_bash_files
echo ""






# Get bash file list
find $ROOT_PATH -name "*.bsh" > $tmp_bash_list_file
find $ROOT_PATH -name "*.sh" >> $tmp_bash_list_file
nbBashFiles=$(wc -l $tmp_bash_list_file)

# for each bash file, check it, then store the name if there is a problem
while read onebashFile
do
	bash -n $onebashFile > $tmp_bashlintres_file
	if test $? -eq 0
	then
		# No problem
		useless=true
	else
		echo "$onebashFile cannot parse"
		#cat $tmp_bashlintres_file
		echo "$onebashFile" >> $output_bad_bash_files
	fi


	rm $tmp_bashlintres_file
done < $tmp_bash_list_file
rm $tmp_bash_list_file



# Check the result file to print a summary to the user.
# there is a 2 line comment in the file. it must be ignored
nbLines=$(wc -l $output_bad_bash_files | cut -d' ' -f1)
if test $nbLines -le 2
then
	echo "All $nbBashFiles bash files in $ROOT_PATH are valid"
	echo "SUCESS"
else
	echo "[ERRORS] $nbLines/$nbBashFiles bash files in $ROOT_PATH are invalid"
	echo "open $(realpath $output_bad_bash_files) to see the list of invalid bash files."
	echo "FAIL"
fi


cd -
exit $(test $nbLines -le 2)
